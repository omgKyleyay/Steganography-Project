/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kylesteggui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.FileChooser;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Kyle
 */
public class GUI extends javax.swing.JFrame {
    public String pathLarge;
    public String pathSmall;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        FileChooser1 = new javax.swing.JFileChooser();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        LabelLarge = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LabelSmall = new javax.swing.JLabel();
        BtnEncode = new javax.swing.JButton();
        BtnDecode = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenFile1 = new javax.swing.JMenuItem();
        OpenFile2 = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelLarge.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(LabelLarge);

        LabelSmall.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane2.setViewportView(LabelSmall);

        BtnEncode.setText("Encode");
        BtnEncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEncodeActionPerformed(evt);
            }
        });

        BtnDecode.setText("Decode");
        BtnDecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDecodeActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        OpenFile1.setText("Choose Image 1..");
        OpenFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFile1ActionPerformed(evt);
            }
        });
        jMenu1.add(OpenFile1);

        OpenFile2.setText("Choose Image 2");
        OpenFile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFile2ActionPerformed(evt);
            }
        });
        jMenu1.add(OpenFile2);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BtnEncode, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnDecode, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnDecode, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnEncode, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public ImageIcon ResizeImage(String path){ //takes the large image and converts it into an imageIcon to be displayed
        ImageIcon MyImage = new ImageIcon(path);
        Image newImg = MyImage.getImage();
        ImageIcon image = new ImageIcon(newImg);
        
        return image;
    }
    
    private void OpenFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFile1ActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();                        //file chooser for Large image
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION){
            File selectedFile = file.getSelectedFile();
            pathLarge = selectedFile.getAbsolutePath();
            ImageIcon LargePicture = ResizeImage(pathLarge);
            LabelLarge.setIcon(LargePicture);                 //sets label to display large image
        }
        
        else if (result == JFileChooser.CANCEL_OPTION){
            System.out.println("No File Selected");
        }

    }//GEN-LAST:event_OpenFile1ActionPerformed

    private void OpenFile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFile2ActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();                     //same as OpenFile1ActionPerformed method, except this is for the smaller image label
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION){
            File selectedFile = file.getSelectedFile();
            pathSmall = selectedFile.getAbsolutePath();
            ImageIcon SmallPicture = ResizeImage(pathSmall);
            LabelSmall.setIcon(SmallPicture);
            


            
        }
        
        else if (result == JFileChooser.CANCEL_OPTION){
            System.out.println("No File Selected");
        }
    }//GEN-LAST:event_OpenFile2ActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0); 
    }//GEN-LAST:event_ExitActionPerformed
    
    
    BufferedImage ImageCopy(BufferedImage image) //copies large image pixel by pixel
    {
        BufferedImage newImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
        for (int row = 0; row < image.getWidth(); row++) {
            for (int column = 0; column < image.getHeight(); column ++) {
                int value = image.getRGB(row, column);
                newImage.setRGB(row, column, value);
            }
        } 
        return newImage;
    }
    
    
    private void BtnEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEncodeActionPerformed
        try {

            LFSR.FreshLFSR();
            File FileBufferLarge = new File(pathLarge);
            File FileBufferSmall = new File(pathSmall);
            
            BufferedImage imgLarge = ImageIO.read(FileBufferLarge); //Large imageIcon into a BufferedImage
            BufferedImage imgSmall = ImageIO.read(FileBufferSmall); //Small imageIcon into a BufferedImage
          
            BufferedImage EncryptedImg;
            EncryptedImg = ImageCopy(imgLarge); //makes a copy of the large image that can be primed for encryption

            int XofBig; //x value of large image
            int YofBig; //y value of large image
            int value;
            int BigWidth = imgLarge.getWidth();
            int BigHeight = imgLarge.getHeight();
            
            for(int x = 0; x < imgSmall.getWidth(); x++) //runs through small img rows
            {
                
                for (int y = 0; y < imgSmall.getHeight(); y++) { //runs through small img columns
                    
                    Color smallColor = new Color(imgSmall.getRGB(x, y)); //get RGB of small img at x, y
                    

                    for (int offset = 0; offset < 8; offset++)
                    {
                        do{
                            value = LFSR.getNextInt(BigWidth, BigHeight);
                        }
                        while(value == -999); // LFSR pixel value
                        
                        
                        XofBig = value % BigWidth; 
                        YofBig = value / BigWidth;
                        

                        Color bigColor = new Color(imgLarge.getRGB(XofBig, YofBig)); //retrieve large img pixel at x, y
                        

                        int SmallRed = (smallColor.getRed() >> offset) & 0x01; //acquires small img least significant bits in RGB
                        int SmallGreen = (smallColor.getGreen() >> offset) & 0x01;
                        int SmallBlue = (smallColor.getBlue() >> offset) & 0x01;
                        

                        int BigRed = ((bigColor.getRed() & 0xFE) | SmallRed); //aqcuires large img least significant bits in RGB
                        int BigGreen = ((bigColor.getGreen() & 0xFE) | SmallGreen);
                        int BigBlue = ((bigColor.getBlue() & 0xFE) | SmallBlue);
                         
                        EncryptedImg.setRGB(XofBig, YofBig, new Color(BigRed, BigGreen, BigBlue).getRGB()); //puts encrypted pixel into copied large image at x,y
                        
                    }    
                }
            }
            //Displays EncryptedImg to label
            LabelSmall.setIcon(new ImageIcon(EncryptedImg));
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

            
        
    }//GEN-LAST:event_BtnEncodeActionPerformed

    
    private void BtnDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDecodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnDecodeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnDecode;
    private javax.swing.JButton BtnEncode;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JFileChooser FileChooser1;
    private javax.swing.JLabel LabelLarge;
    public static javax.swing.JLabel LabelSmall;
    public javax.swing.JMenuItem OpenFile1;
    public javax.swing.JMenuItem OpenFile2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
